// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: plate.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlateServiceClient is the client API for PlateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlateServiceClient interface {
	GetPlate(ctx context.Context, in *GetPlateRequest, opts ...grpc.CallOption) (*Plate, error)
	ListPlates(ctx context.Context, in *ListPlatesRequest, opts ...grpc.CallOption) (*ListPlatesResponse, error)
}

type plateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlateServiceClient(cc grpc.ClientConnInterface) PlateServiceClient {
	return &plateServiceClient{cc}
}

func (c *plateServiceClient) GetPlate(ctx context.Context, in *GetPlateRequest, opts ...grpc.CallOption) (*Plate, error) {
	out := new(Plate)
	err := c.cc.Invoke(ctx, "/services.PlateService/GetPlate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plateServiceClient) ListPlates(ctx context.Context, in *ListPlatesRequest, opts ...grpc.CallOption) (*ListPlatesResponse, error) {
	out := new(ListPlatesResponse)
	err := c.cc.Invoke(ctx, "/services.PlateService/ListPlates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlateServiceServer is the server API for PlateService service.
// All implementations should embed UnimplementedPlateServiceServer
// for forward compatibility
type PlateServiceServer interface {
	GetPlate(context.Context, *GetPlateRequest) (*Plate, error)
	ListPlates(context.Context, *ListPlatesRequest) (*ListPlatesResponse, error)
}

// UnimplementedPlateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlateServiceServer struct {
}

func (UnimplementedPlateServiceServer) GetPlate(context.Context, *GetPlateRequest) (*Plate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlate not implemented")
}
func (UnimplementedPlateServiceServer) ListPlates(context.Context, *ListPlatesRequest) (*ListPlatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlates not implemented")
}

// UnsafePlateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlateServiceServer will
// result in compilation errors.
type UnsafePlateServiceServer interface {
	mustEmbedUnimplementedPlateServiceServer()
}

func RegisterPlateServiceServer(s grpc.ServiceRegistrar, srv PlateServiceServer) {
	s.RegisterService(&PlateService_ServiceDesc, srv)
}

func _PlateService_GetPlate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlateServiceServer).GetPlate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PlateService/GetPlate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlateServiceServer).GetPlate(ctx, req.(*GetPlateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlateService_ListPlates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlateServiceServer).ListPlates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PlateService/ListPlates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlateServiceServer).ListPlates(ctx, req.(*ListPlatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlateService_ServiceDesc is the grpc.ServiceDesc for PlateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PlateService",
	HandlerType: (*PlateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlate",
			Handler:    _PlateService_GetPlate_Handler,
		},
		{
			MethodName: "ListPlates",
			Handler:    _PlateService_ListPlates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plate.proto",
}
